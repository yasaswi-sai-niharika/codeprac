# list
# collections.deque
# queue.LifoQueue
# linkedlist 

#list
stack = []

stack.append(1)
stack.append(2)
stack.append(3)
stack.append(4)
stack.append(5)
print("list")
print(stack)

stack.pop()
print(stack)
stack.pop()
print(stack)
print("\n")
# collections.deque
from collections import deque
stack=deque()
stack.append("a")
stack.append("b")
stack.append("c")
print("collections.deque")
print(stack)

stack.pop()
print(stack)
print("\n")
# queue.LifoQueue
from queue import LifoQueue
stack = LifoQueue(maxsize=4)
print("queue.LifoQueue")
print("queue size: ",stack.qsize()," before insertion")
stack.put("X")
stack.put("XX")
stack.put("XXX")
stack.put("XXXX")
print("queue size: ",stack.qsize())
print("popped element: ",stack.get()) #.get() function acts as pop()
print("queue size: ",stack.qsize())
print("\n")

#Linkedlist
class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
class LinkedList_Stack:
    def __init__(self):
        self.head = None
    def push(self,newnode):
        if self.head is None:
            self.head = newnode
            return
        node = self.head
        self.head = newnode
        newnode.next = node
        return
    def pop(self):
        if self.head is None:
            return -1
        self.head=self.head.next
        return
    
    def __repr__(self):
        node = self.head
        nodes = []
        while node:
            nodes.append(node.data)
            node = node.next
        nodes.append("None")
        return " -> ".join(nodes)
stack = LinkedList_Stack()
stack.push(Node("a"))
stack.push(Node("b"))
stack.push(Node("c"))
stack.push(Node("d"))
print("linkedlist")
print(stack)
stack.pop()
print(stack)
stack.pop()
print(stack)
stack.pop()
print(stack)
stack.pop()
print(stack)
stack.pop()
print(stack)
    
# output
# list
[1, 2, 3, 4, 5]
[1, 2, 3, 4]
[1, 2, 3]


collections.deque
deque(['a', 'b', 'c'])
deque(['a', 'b'])


queue.LifoQueue
queue size:  0  before insertion
queue size:  4
popped element:  XXXX
queue size:  3
Report Bug

Linkedlist
d -> c -> b -> a -> None
c -> b -> a -> None
b -> a -> None
a -> None
None
stack is Empty




