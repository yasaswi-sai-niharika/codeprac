class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

class DoublelyLinkedList:
    def __init__(self):
        self.head = None
        
    def insert(self, newnode):
        node = self.head
        if node is None:
            self.head = newnode
            return
        else:
            while node.next is not None:
                node = node.next
            newnode.prev= node
            node.next = newnode
    def delete(self, target):
        if self.head is None:
            return -1
        if self.head.next is None:
            self.head = None
            return
        if target == self.head.data:
            self.head= self.head.next 
            self.head.prev = None
            return
        else: 
            node = self.head.next
            while node.next is not None:
                if node.data == target:
                    node.next = node.next.next
                    node.next.prev = node.prev
                    return
                node = node.next
            node.prev.next= None
            return
                
    
    def __repr__(self):
        node = self.head
        nodes = []
        while node is not None:
            nodes.append(node.data)
            node = node.next
        nodes.append("None")
        return " <-> ".join(nodes)
dlist = DoublelyLinkedList()
# first = Node("a")
# dlist.head = first
# second = Node("b")
# first.next = second
# second.prev = first
# third = Node("c")
# second.next = third
# third.prev = second
dlist.insert(Node("a"))
dlist.insert(Node("b"))
dlist.insert(Node("c"))
print(dlist)
dlist.delete("a")
print(dlist)
dlist.delete("c")
print(dlist)

# Output
# a <-> b <-> c <-> None
# b <-> c <-> None
# b <-> None
